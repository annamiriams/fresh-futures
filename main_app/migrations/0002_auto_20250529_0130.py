# Generated by Django 5.2.1 on 2025-05-29 01:30

from django.db import migrations

# Goal: automatically insert preset goal, plant, and support options into the db when the migration is run.
# Future changes: If future changes need to be made to goals/plants/supports, make manual edits using Django Admin or write a new data migration, like I just did here:
    # Create an empty migration
        # python manage.py makemigrations --empty main_app
    # Update the file (instead of 'def populate_goal_options' use 'update_goal_options'; instead of 'goals=[]' use 'new_goals=[]'; remove goals using 'GoalOption.objects.filter(name='<enter goal name here>').delete()'; update dependencies to list the most recent migration file name; update operations to use the new name (ie 'update_goal_options'))

def populate_goal_options(apps, schema_editor):
    # It seems we won't actually use schema_editor (above), but it's a required parameter when this function is called. It's used when executing raw SQL or manually altering the schema.
    GoalOption = apps.get_model('main_app', 'GoalOption')
        # Gets GoalOption as it existed when this migration was initially created. This avoids importing the model directly because apparently this is safer when managing migrations. Using the "versioned history" of a model allows for changes to a model to be made, and then safely migrate afterward.
    
    goals = [
        'grow fresh food for myself and my family',
        'share food with neighbors or a mutual aid group',
        'build community and connection',
        'offer educational opportunities',
        'create a safe, outdoor space for gardening',
    ]
    
    for goal in goals:
        GoalOption.objects.get_or_create(name=goal)
            # get_or_create avoids duplicates if migration runs again because it searches for existing entries of a goal option that already exists.
            # If it doesn't exist already, create a new goal.

# The notes above are equally applicable for plant and support options below:
def populate_plant_options(apps, schema_editor):
    PlantOption = apps.get_model('main_app', 'PlantOption')
    plants = [
        'leafy greens',
        'herbs',
        'flowers',
        'vegetables',
        'fruits',
    ]
    for plant in plants:
        PlantOption.objects.get_or_create(name=plant)

def populate_support_options(apps, schema_editor):
    SupportOption = apps.get_model('main_app', 'SupportOption')
    supports = [
        'finding available land',
        'access to water',
        'seeds are starter plants',
        'how-to guides',
        'volunteers',
        'help reaching community',
    ]
    for support in supports:
        SupportOption.objects.get_or_create(name=support)


class Migration(migrations.Migration):

    dependencies = [
        ('main_app', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(populate_goal_options),
        migrations.RunPython(populate_plant_options),
        migrations.RunPython(populate_support_options),
    ]